use Assignments
select * from dbo.fact
select * from dbo.Location
select * from dbo.Product

--1.Display the number of states present in the LocationTable.
select count(distinct(state)) as States from dbo.location

---2. How many products are of regular type?
select count(type) as Number_of_regular_Type from dbo.Product
where Type='Regular'

----3. How much spending has been done on marketing of product ID 1?
select sum(marketing) as Spent_on_Marketing from dbo.fact
where productid=1

---4. What is the minimum sales of a product?
select ProductId, min(Sales) as Min_Sales from dbo.fact
group by ProductId
order by ProductId asc

--5. Display the max Cost of Good Sold (COGS).
select max(COGS) as Max_COGS from dbo.fact

---6. Display the details of the product where product type is coffee.
select F.ProductId,P.Product,P.Product_Type,P.Type,F.Date,F.Profit,F.Sales,F.Margin from 
dbo.fact as F
left join
dbo.Product as P
on F.ProductId=p.ProductId
where Product_Type='Coffee'

---7.Display the details where total expenses are greater than 40.
select * from dbo.fact
where Total_Expenses>40

-----8. What is the average sales in area code 719?
select avg(sales) Avg_Sales from dbo.fact
where Area_Code=719
----9. Find out the total profit generated by Colorado state.
select sum(profit) Total_Profit_Colorado
from dbo.fact F
inner join dbo.Location L
on F.Area_Code=L.Area_Code
where state='Colorado'

---10. Display the average inventory for each product ID.
select ProductId, avg(inventory) Avg_Inventory from dbo.fact
group by ProductId
order by ProductId asc

---11. Display state in a sequential order in a Location Table.
select distinct(state) from Location order by state

---12. Display the average budget of the Product where the average budget
-----margin should be greater than 100.
select ProductId, avg(budget_margin) as Avg_Budget 
from dbo.fact
Group by ProductId
Having avg(Budget_Margin)>100
order by ProductId asc

---13. What is the total sales done on date 2010-01-01?
select sum(sales) Total_Sales from dbo.fact
where Date='2010-01-01'

----14. Display the average total expense of each product ID on an individual date.

select ProductID, Date, avg(Total_expenses) Avg_Total_Expenses from dbo.fact
group by ProductID,Date
order by ProductID,Date

----15. Display the table with the following attributes such as date, productID,
-----product_type, product, sales, profit, state, area_code.
select F.Date,F.ProductId,P.Product_Type,P.Product,F.Sales,F.Profit,L.State,L.Area_Code
from dbo.fact f
inner join dbo.Product p
on F.ProductId=p.ProductId
inner join dbo.Location L
on f.Area_Code=L.Area_Code

---16. Display the rank without any gap to show the sales wise rank.
select Sales,DENSE_RANK() over(order by sales desc) Sales_Rank from dbo.fact

---17. Find the state wise profit and sales.
select L.State, sum(F.Profit) Profit, sum(F.Sales) Sales
from dbo.fact F
inner join dbo.Location L
on F.Area_Code=L.Area_Code
group by state

---18. Find the state wise profit and sales along with the product name.
select L.State, sum(F.Profit) Profit, sum(F.Sales) Sales,P.Product
from dbo.fact F
inner join dbo.Location L
on F.Area_Code=L.Area_Code
inner join Product P
on f.ProductId=p.ProductId
group by state,Product
order by State

---19. If there is an increase in sales of 5%, calculate the increasedsales.
select Sales, sales*1.05 Increased_sales from dbo.fact

----20. Find the maximum profit along with the product ID and producttype.
select P.ProductId,P.Product_Type, max(profit) Max_Profit
from dbo.fact F
inner join dbo.Product P
on F.ProductId=P.ProductId
group by Product_Type, P.ProductId
order by Product_Type, P.ProductId

----21. Create a stored procedure to fetch the result according to the product type
------from Product Table.
create proc SP_Prod_Type @Prod_Type nvarchar(20)
as
begin
     select * from dbo.Product where Product_Type=@Prod_Type
end

exec SP_Prod_Type 'Tea'

---22. Write a query by creating a condition in which if the total expenses is less than
------60 then it is a profit or else loss.
select Total_Expenses,
IIF(Total_Expenses<60,'Profit','Loss') as Status
 from dbo.fact

 ----23. Give the total weekly sales value with the date and product ID details. Use
-------roll-up to pull the data in hierarchical order.
select datepart(week,Date) Week_Num, ProductID, Sum(sales) Weekly_Sales
from dbo.fact
group by datepart(week,Date),ProductID
with rollup

----24.Apply union and intersection operator on the tables which consist of
-----attribute area code.

select Area_Code from dbo.fact
union 
select Area_Code from dbo.Location


select Area_Code from dbo.fact
intersect 
select Area_Code from dbo.Location

----25. Create a user-defined function for the product table to fetch a particular
-----product type based upon the user’s preference.
create function Prod_Type (@Prod_Type nvarchar(20))
returns table 
as 
return select * from dbo.Product where Product_Type=@Prod_Type

select * from dbo.Prod_Type('Coffee')

---26. Change the product type from coffee to tea where product ID is 1 and undo it.

begin transaction
update dbo.Product
set Product_Type='Tea'
where ProductId=1

rollback transaction

----27. Display the date, product ID and sales where total expenses are
-----between 100 to 200.

select Date, ProductID, Sales from dbo.fact
where total_expenses between 100 and 200

----28. Delete the records in the Product Table for regular type.
-----begin tran
delete from Product
where Type='Regular'
-----rollback tran

-----29. Display the ASCII value of the fifth character from the columnProduct.
select Product, (ascii(substring(Product,5,1))) as Fifth_Ascii from Product